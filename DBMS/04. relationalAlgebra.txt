It's procedural query language which takes relation as input and relation as output. It provides theoretical background for relational databases and SQL.

// Projection (π) :
    project required columns from table.
    π(BC) => gives output as new table with two columns B and C
    output table does not contain any duplicate rows.

// Selction (σ) : 
    select required rows from table.
    σ (c>3)R will select the rows which have c more than 3 from R table.
    selection operator only selects the required tuples but does not display them. For displaying, data projection operator (π) is used.

// Union (U) :
    same as set union.
    two tables must have same set of attributes for union.

// Set Difference (-) :
    same as set difference.
    two tables must have same set of attributes for set difference.
    
    Note: in set theory :  X intersection Y = X - Y' 
                           X intersection Y' = X - Y
// Rename (ρ) :
    rename an attribute of table.

// Cross Product (X) :
    if A has n tuples and B has m tuples then A X B will have n * m tuples.
    All attributes of A followed by all attributes of B.

// Intersection (∩) : 
    These two relation should have same number of attributes and corresponding attributes in two relations have same domain.
    
// Natural Join (⋈) :
    It is a special case of equijoin in which equality condition hold on all attributes which have same name in relations R and S
    
    set of all combination of tuples where they have equal common attribute.
    e.g.

           Emp                              Dep
   (Name   Id   Dept_name )          (Dept_name   Manager)
   ------------------------          ---------------------    
     A     120    IT                    Sale     Y
     B     125    HR                    Prod     Z
     C     110    Sale                  IT       A
     D     111    IT                      


                        Emp ⋈ Dep

                        Name   Id   Dept_name   Manager
                        -------------------------------
                        A     120   IT          A 
                        C     110   Sale        Y
                        D     111   IT          A

    // Dangling Tuple :
	    in case of natural join when a tuple does not join with any other in other relation then that tuple is called dangling tuple

// Equijoin: 
    Equijoin is a special case of conditional join where only equality condition holds between a pair of attributes.

// Conditional Join :
    in Natural join the condition by default in of equality here we can specify the condition.
    e.g. Join between R And S with condition  R.marks >= S.marks

// Division Operator (÷) : 
    Division operator A ÷ B can be applied if and only if:
        Attributes of B is proper subset of Attributes of A.
        The relation returned by division operator will have attributes = (All attributes of A – All Attributes of B)
        The relation returned by division operator will return those tuples from relation A which are associated to every B’s tuple.
