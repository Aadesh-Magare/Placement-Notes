// Functional Dependency :
    Functional Dependency is a constraint between two sets of attributes in a relation .
    If an attributed A functionally determines B, then it is written as A -> B
    
    A functional dependency A -> B mean for all instances of a particular value of A, there is same value of B.
    e.g.
        for	A -> B
        if two tuples have same value of A they will have same value of B i.e. the value of A uniquely determines value of B.
        it's property of entire schema and not of any particular tuple
    
    we say F.D. F holds on relation R when every tuple in relation R must satisfy the F.D
 
    // Trivial Functional Dependency :
        X –> Y is trivial only when Y is subset of X.
        A --> A is also trivial.
    // Non Trivial Functional Dependencies :
        X –> Y is a non trivial functional dependencies when Y is not a subset of X.
        X –> Y is called completely non-trivial when X intersect Y is NULL.
    
    // FD Set : FD set of a relation is the set of all FDs present in the relation.

    // Attribute Closure : steps to find attribute closure of given attribute set.
        Add elements of attribute set to the result set.
        Recursively add elements to the result set which can be functionally determined from the elements of the result set.

        If attribute closure of an attribute set contains all attributes of relation, the attribute set will be super key of the relation.
        
        If no subset of this attribute set can functionally determine all attributes of the relation, the set will be candidate key as well. (this means it's smallest set of attributes)

        If F is functional dependency , the closure of F is (F^+) the set of all functional dependencies logically implied by F.
        // How to find closure of AG (AG^+) :            
            take result = AG initially
            take one F.D. from F at one time and check if left side is subset of Result if so append the right side to result, repeat this for all F.D in F and when result stops changing stop process.

        // Armstrong's axioms :
            // Reflexivity : a -> b holds if b is subset of a
            // Augmentation : a-> b holds then Ca -> Cb also holds
            // Transitivity : a -> b holds and b -> c holds then a -> c holds
            // Additional rules :
                // Union rule : a -> b and a -> c holds then a -> bc holds.
                // Decomposition rule : a -> bC hold then a -> b holds and a -> C holds
                // Pseudo-transitivity rule : a -> b and Cb -> f holds then Ca -> f 
                    holds. if a->b and c->d then ac->bd

        // To check whether an FD A->B can be derived from an FD set F :
            Find (A)+ using FD set F.
            If B is subset of (A)+, then A->B is true else not true.

        // if two F.D. have the same closure then they are almost equivalent. 
        i.e. if database satisfies one of them it will surely satisfy the other as well.

        // Equivalent FD :
            Let FD1 and FD2 are two FD sets for a relation R.
            If all FDs of FD1 can be derived from FDs present in FD2, we can say that FD2 ⊃ FD1. (FD1 is subset of FD2)
            If all FDs of FD2 can be derived from FDs present in FD1, we can say that FD1 ⊃ FD2. (FD2 is subset of FD1)
            If 1 and 2 both are true, FD1=FD2.

        // Prime and non-prime attributes :
            Attributes which are parts of any candidate key of relation are called as prime attribute, others are non-prime attributes.
    
    // Canonical Cover :
        Working with functional dependencies introduces more complexities while insertion / updating / deletion of data since the dependencies needs to be maintained during database updates.

        A canonical cover of a set of functional dependencies F is a simplified set of functional dependencies that has the same closure as the original set F.

        // Extraneous attributes: an attribute is extraneous if we can remove it without changing the closure.

        Canonical cover: A canonical cover Fc of a set of functional dependencies F such that ALL the following properties are satisfied:
            1. F logically implies all dependencies in Fc.
            2. Fc logically implies all dependencies in F.
            3. No functional dependency in Fc contains an extraneous attribute.
            4. Each left side of a functional dependency in  Fc is unique.

        // Finding Canonical Cover :
            1. Use the union rule to replace any dependencies in A -> B1 and A -> B2 with A -> B1B2
            2. Find a functional dependency A -> B with an 
            extraneous attribute either in A or B.
            3. If an extraneous attribute is found, delete it from A -> B
            until F does not change

                            OR
            
            1. convert F.D in such way that right side has only one term
            2. remove duplicates

// Decomposition : 
    when we decompose a relation into two or more relations there may be two types of decompositions lossy-decomposition and lossless decomposition

    // Lossless-join decomposition :
        R having (F.D. F) is decomposed into R1 and R2
        then if  one of this is in F^+
        R1 intersection R2 --> R1 
        R1 intersection R2 --> R2 

        If we decompose a relation R into relations R1 and R2 :
            Decomposition is lossy if R1 ⋈ R2 ⊃ R
            Decomposition is lossless if R1 ⋈ R2 = R

        // check for lossless join decomposition using FD set :
            // Union of Attributes of R1 and R2 must be equal to attribute of R. Each attribute of R must be either in R1 or in R2.
                Att(R1) U Att(R2) = Att(R)
            // Intersection of Attributes of R1 and R2 must not be NULL.
                Att(R1) ∩ Att(R2) ≠ Φ
            // Common attribute must be a key for at least one relation (R1 or R2)
                Att(R1) ∩ Att(R2) -> Att(R1) or Att(R1) ∩ Att(R2) -> Att(R2)
            
    // Dependency Preserving Decomposition :
        Decomposition of R into R1 and R2 is a dependency preserving wrt set F of functional dependencies if closure of functional dependencies after decomposition is same as closure of of FDs before decomposition.
        
        A simple way is to just check whether we can derive all the original FDs from the FDs present after decomposition.

        R is decomposed or divided into R1 with FD { f1 } and R2 with { f2 } then :
            f1 U f2 = F -----> Decomposition is dependency preserving. 
            f1 U f2 is a subset of F -----> Not Dependency preserving.

// Normalization : 
    It's a process to organize attributes of relation to reduce or eliminate data redundancy.

    // Normal Forms :

        // First Normal Form :
            Does not contain any composite or multi-valued attribute. A relation is in first normal form if every attribute in that relation is singled valued attribute.
            e.g.
            Relation STUDENT is not in 1NF because of multi-valued attribute STUD_PHONE_NUMBER.

        // Second Normal Form :
            // Partial Dependency :
                If proper subset of candidate key determines non-prime attribute (attributes not part of candidate key), it is called partial dependency.
                e.g.
                    R : { STUD_NO, COURSE_NO, COURSE_NAME }
                    FD set : { COURSE_NO -> COURSE_NAME }
                    Candidate Key : { STUD_NO, COURSE_NO }
                    In FD COURSE_NO -> COURSE_NAME, COURSE_NO (proper subset of candidate key) is determining COURSE_NAME (non-prime attribute). Hence, it is partial dependency.

            // 2NF : 
                A relation is in 2NF iff it has No Partial Dependency, i.e. no non-prime attribute (attributes which are not part of any candidate key) is dependent on any proper subset of any candidate key of the table.

        // Third Normal Form :
            A relation is in 3NF iff at least one of the following condition holds in every non-trivial function dependency X –> Y :
                X is a super key.
                Y is a prime attribute (each element of Y is part of some candidate key).

            // 3NF :
                There is no transitive dependency for non-prime attributes. 

        // Boyce-Codd Normal Form (BCNF) :
            A relation R is in BCNF if for every FD, LHS is super key. 
            It's free from redundancy.
            // BCNF :
                A relation is in BCNF iff in every non-trivial functional dependency X –> Y, X is a super key. 

        // Steps to find the highest normal form of a relation :
            1. Find all possible candidate keys of the relation.
            2. Divide all attributes into two categories: prime attributes and non-prime attributes.
            3.  Check for 1st normal form then 2nd and so on. If it fails to satisfy nth normal form condition, highest normal form will be n-1.

