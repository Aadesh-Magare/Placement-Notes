a 8 bit can represent numbers from 0 to 255 (unsigned numbers).

// Sign-Magnitude representation:
	used to represent negative numbers, MSB is considered as sign bit.
	
	// Range of numbers : for n bit number
		-2^(n-1) - 1 to +2^(n-1) - 1 
	// Disadvantage :
		there are two representation of 0, so checking for 0 becomes slower.
		addition and subtraction requires considering signs of both numbers.

// Twos complement representation :
	universally used in computers to represent negative numbers.
	to convert number to negative take 1's complement and add 1 to result.

	// Range of numbers : for n bit number
		-2^(n-1) to +2^(n-1) – 1
	one's complement has two representations of 0. +ve and -ve zero. hence twos complement is preferred which has only one representation for 0.
	
	Range of Numbers : For n bit number.
		Unsigned Number : 0 to 2^(n) - 1
		Signed Number : –2^(n-1) + 1 to 2^(n-1) – 1
		1's Complement : -2^(n-1) + 1 to 2^(n-1) - 1 
		2's Complement : -2^(n-1) to 2^(n-1) - 1 

// Converting the bit length:
	when sign Magnitude method is used, simply move the sign bit to new leftmost position and fill in with zeros

	when two complement method is used, move the sign bit to new leftmost position and fill in with copies of sign bit.

// Fixed point representation :
	for whole numbers radix point is fixed and assumed to be to the right of rightmost digit, same representation can be used for binary fractions.

// Integer Arithmetic :
	
	// Negation :
		in sign Magnitude method just invert the sign bit.
		in two complement method, take complement and while treating it as unsigned number add 1 to it.

	// Addition & Subtraction :
		if the result of operation is positive, we get positive number in ordinary binary notation.
		if the result of operation is negative, we get negative number in twos complement form.

		if there is carry bit beyond the end of word (more no of bits than the operands) then extra bit is ignored.

		// overflow :
			when two numbers are added and both are positive or negative then overflow occurs iff the result has opposite sign.

			it can occur whether or not there is carry.

	// Multiplication :
		M = multiplicand
		Q = multiplier
		A = store result
		C = to store overflow bit.

		start with A, C = 0

			M
         C  A  Q 

		 take 1 bit at a time from Q:
			if bit is 1 add M to A, shift right by 1 bit. C bit will flow in A and A's bit will flow in Q.
			if bit is 0, just shift right by 1 bit, don't add.
			
	// Twos complement Multiplication :

		// Multiplier is positive :

			if multiplier is positive and multiplicand is negative we can use simple Multiplication where partial multiplications are 2n bits long and instead of padding left side of partial multiplication with 0 here we pad them with 1.

					1001 * 0011		-7 * 3

					11111001
				+   11110010
				=	11101011

		// Multiplier is negative :

			can't use simple multiplication.

		// Booth's algorithm for twos complement multiplication :

			M = multiplicand
			Q = multiplier
			A = store result
			q = to store shifted bit.

			start with A, q = 0

				M
			  A  Q q 	
			 
			  take 1 bit at a time from Q :
			  	bit to its right is also examined.
				  
				if two bits are same, then all of bits of A, Q and q are shifted to right by 1, but the leftmost bit of A is not made 0 on shift, its original value is kept, its called Arithmatic shift.

				if two bits differ and they are 01 then M is added to A 
				if two bits differ and they are 10 then M is subtracted from A
				it's followed by Arithmatic shift.
				
				 
	// Division :
		M = divisor
		A, Q = dividend, it must be in 2n bits and in 2s complement format.

		1. shift A,Q left 1 bit position.
		2. if M and A have same signs set A = A - M
					else A = A + M
		3. operation 2 is successful if A has same sign before and after the operation.
		4. if operation is successful or A = 0 then Q0 = 1
			if operation is unsuccessful and A != 0 then Q0 = 0 and restore the previous value of A.
		5.repeat steps 2 to 4 as many number of times as there are bits in Q.
		6. at the end remainder is in A. 
			If signs of divisor and dividend are same then quotient is in Q, 
			else quotient is 2s complement of Q.

// Floating Point Numbers:
	32-bit floating point number.
		1. leftmost bit is sign bit
		2. next 8 bits store exponent : but not directly, a fixed value called bias is 	subtracted from the field to get the true exponent value.
			bias = 2^k-1 - 1 (k : no of bits in exponent) 
			For 8 bit exponent bias is 127.
		3. remaining 23 bits are significand or mantissa.
		This is called biased representation.

	normalized number : MSB of significand is nonzero (1 for binary). convention is that there should be 1 bit to left of radix point. since msb is 1 implicitly, no need to store it. so 23 bits significant can be used to store 24 bits where 1st bit will be 1 by default.

	64-bit floating point number :
		it's similar to 32 bit number. except that
			exponent = 11 bits (hence bias 1023)
			mantissa = 52 bits
	// Addition / Subtraction :
		1. Zero check, if one number is zero return the other one
		2. Significand alignment : make the exponent match for both numbers since it can result in loss of some digits generally smaller number is shifted. 
		3. Addition of significands. in case of overflow result significand is shifted right and exponent is incremented, in case of exponent overflow it is reported and operation is halted.
		4. Normalize the result.

	// Multiplication / Division :

		// Multiplication:
			1. If either operand is 0 result is 0.
			2. Add the exponents : if they are stored in biased form then it got doubled so subtract the bias from the sum. exponent overflow / underflow is reported, ending the operation.
			3. Multiply the significands just like integer multiplication taking into account their signs.
			4. Result is normalized.

		// Division :
			1. If divisor is 0, report error or set result as infinity.
				dividend is 0, result is 0.
			2. Subtract exponent : subtract exponent from divisor from dividend. This removes bias so it has to be added again.
			3. Divide the significands just like integer division.
			4. Result is normalized.


	// Precision Consideration :
		// Guard Bits :
			Register contains more bits than the length of significand which are used to pad out right end of significand with 0s. these extra bits are called Guard bits.
			These are useful to save intermediate numbers during calculations since intermediate numbers might be bigger than end result.

		// Rounding :
			Rounding to nearest : nearest representable value is chosen. if there are two values which are equally near the one with LSB 0 is chosen.

			Round to -inf / +inf : used in case of range values.

			Round to zero
    
	// IEEE Standard :
		give specification for infinity, quiet and signaling NaNs and de normalized numbers.