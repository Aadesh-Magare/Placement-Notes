// Lexical Analyser :

    Only phase which reads actual program character by character, only this phase knows about the line numbers where each token appears. also known as scanner phase.

    It can be implemented with DFA.
    
    Main tasks of the phase :
        1. Convert lexems into tokens.
        2. Removing comments and whitespace.

// Syntax Analyser : takes grammar and tokens as input.

    Yield of parse tree is nothing but output of parse tree, to get the yield we can traverse the tree top to bottom, left to right
    
    // Ambiguous-Unambiguous grammar :
        If grammar generates more than one parse trees or LMD or RMD for a string then the grammar is ambiguous.
        Most parsers don't allow ambiguous grammars so we have to convert it to unambiguous.

        A CFL L is said to be inherently ambiguous language if every CFG G with language L = L(G) is ambiguous.

        There is no algorithm to detect whether the grammar is ambiguous or not, also there is no algorithm to convert ambiguous grammar to unambiguous.

        // Removing ambiguity of grammar :
            
            Should take care of associativity and precedence in case of arithmetic grammars.
            
            A left-recursive grammar will make sure that left associativity is followed while right recursive will make sure right associativity is followed.
                LR : A -> Aa | b
                RR : E -> aE | c
                
            The operator at lower level in parse tree will be evaluated first, so higher precedence operator Should come at lower level in parse tree (away from start symbol) than lower precedence operator.

    // Left-Recursive / Right-Recursive :

        Some parsers don't work well Left recursive grammar.
            e.g.    A -> Ab | c
            A is calling A, before doing anything else, this can lead to infinite loop. Hence we need to convert left recursive grammar to right recursive without affecting the language generated by it.
        
        // Removing Left Recursion:
            if grammar is A -> A alpha | beta
            equivalent RL grammar is :
                                        A  -> beta A'
                                        A' -> alpha A' | epsilon 
            
            write given grammar in this format, substitute values for A, alpha, beta and use the formula to get right-recursive grammar.

    // Deterministic / Non-Deterministic grammar :

        parse tree generation by Non-Deterministic grammar involves back-tracking since out of multiple available option we might choose wrong one initially which results in need of backtracking.

        we can convert such Non-Deterministic grammar to Deterministic by using left-factoring i.e. taking out common part of RHS and creating new production out of the uncommon part.
        e.g. A -> ab1 | ab2 | ab3 here not sure which production to choose on seeing a.
        equivalent deterministic grammar:
                A  -> aA'
                A' -> b1 | b2 | b3 
        
        left-factoring postpones the decision making in choosing the production till we see a symbol that is not common across conflicting productions.

    
        Removing Non-Determinism from the grammar will not remove the ambiguity.

    // Types of parsers :
        None of the parsers would work with ambiguous grammar except the operator precedence parser.

        // Parser Hierarchy (all need unambiguous grammar)
            // CLR
                // LALR
                    // SLR              |
                        // LR           | LL might overlap with these two but its totally 
                    // LL               | contained in LALR.
                    
        // Top Down Parsers (TDP) : 
            here main decision is which production to choose at every stage of constructing parse tree. The parse tree is built in left-most derivation fashion.
            // TDP with full backtracking
                Brute force method
            // TDP without full backtracking : No Left-Recursion, No Non-Determinism
                Recursive descent : Does not need extra stack, uses OS stack directly.
                    write an actual program (C language mostly) for the grammar.
                    1. one function for each variable in productions.
                    2. match function that will match the current input with given character.
                    3. main function that will call function corresponding to initial variable and check the end of input string after return from initial call.
                Non-Recursive descent LL(1) :
                    LL(1) : Left to right, Left-most derivation, look ahead of 1 symbol.
                    grammar with left-factoring or left recursion cannot be LL(1)
                    // First() :
                        First of a variable is the first of its RHS from production i.e. the terminal symbol. It can include epsilon as well.
                        Rules:
                            If x is a terminal, then FIRST(x) = { ‘x’ }
                            If x -> Є, is a production rule, then add Є to FIRST(x).
                            If X ->Y1 Y2 Y3….Yn is a production,
                                FIRST(X) = FIRST(Y1)
                                If FIRST(Y1) contains Є then FIRST(X) = { FIRST(Y1) – Є } U { FIRST(Y2) }
                                If FIRST (Yi) contains Є for all i = 1 to n, then add Є to FIRST(X).
                    // Follow() :
                        Follow of a symbol is first of the group that follows it in the production RHS.
                        for right-most symbol, it's follow is follow of LHS. also for some variable everything on its right can become epsilon then its follow will include follow of LHS.
                        Rules:
                            FOLLOW(S) = { $ }   // where S is the starting Non-Terminal
                            If A -> pBq is a production, where p, B and q are any grammar symbols, then everything in FIRST(q)  except Є is in FOLLOW(B).
                            If A->pB is a production, then everything in FOLLOW(A) is in FOLLOW(B).
                            If A->pBq is a production and FIRST(q) contains Є, then FOLLOW(B) contains { FIRST(q) – Є } U FOLLOW(A) 
                    // Parsing table :
                        LL(1) parser cannot be used for all grammars, for some grammars we might get multiple entries in one cell of parse table those grammars won't work with LL(1) parser.

                        Rows are variables from productions and columns are terminals along with $. we have to write all productions into the cells of this table.

                        Now each production will go into the row of that symbol on its LHS. The cell in row will be decided as follows :
                            1. if the RHS contains some variables/terminals : find first() of the RHS, the production goes into the results cell.
                            2. if RHS is epsilon only : find Follow() of the LHS, the production goes into the results cell.
                             
        // Bottom Up Parsers (BUP) : 
            here main decision is when to reduce a terminal into variable. The parse tree is build in reverse order of right-most derivation. (bottom-up)
            // Operator precedence parser : can work with ambiguous grammar as well.
                // Operator grammar : grammar in which no two variable are adjacent.
                // Operator relation table :
                    rows as well as columns are terminals (operators)
                    basically we are comparing precedence of operators against each other.
                    e.g.    grammar is :
                                E ->  E + E | E * E | id 
                            Operator relation table is :
                                id      +       *       $
                            id  -       >       >       >
                            +   <       >       <       >
                            *   <       >       >       >
                            $   <       <       <       -
                // Generating parse tree:
                    A stack is used which initially contains $, the input string ending with $ is compared against the contents of stack.

                    if item is stack has less precedence than input symbol : push the symbol onto stack.
                    if item in stack has more precedence than input symbol : pop the symbol from stack and reduce it using its production.

                    following the procedure we get a parse tree in bottom-up fashion.

                // Operator relation table takes n^2 size for n operators hence to save space operator function table is used that takes 2n size for n operators. when using operator function table additional error handling needs to be done since this table will have entries for even those comparisons which are not present in operator relation table so a separate data structure should be used to remember such cases.

            // LR parsers:
                // LR(0) : Does not look at next symbol while reducing hence called LR(0).
                    Canonical collection of LR(0) items is used to construct LR parsing table.
                    Not all grammars can be handled by LR(0) parser since there might be Shift-Reduce conflicts (S-R conflicts) or Reduce-Reduce conflicts (R-R conflicts)
                    
                    // Construction of parsing table :
                        1. create augmented grammar by adding one more production in the beginning, this will change the start state.
                        2. Introduce dot (.) in the starting production.
                        3. Find closure of starting production.
                        4. Find goto of the production i.e. move the dot by one place to right. also find closure of the output of goto.
                        
                        5. No of states after final operation goes into the table as rows, columns have two parts action and goto.
                        6. Action part contains only terminals (including $) while goto will contain variables.
                        7. All transitions on variables are written in goto part i.e. to which state it goes on seeing this variable.
                        8. All transitions on terminals are written in action part, it's in terms of shifts.
                        9. State which has final items are treated differently than normal ones, augmented state having final item indicates accepted string.
                        10. other states with final items, find corresponding production for the state and add it as reduce production in action part of table.
                        (for all terminals i.e. fill entire row)
                    
                    // Parsing example :
                        1. start the stack with initial state.
                        2. do look-up in the table, if it gives shift move : push the input symbol on the stack followed by shift number. increment input.
                        3. If the look-up gives reduce move : 
                            a) reduce the previous input character of the current one using the production number given by reduce move.
                            b) pop out 2n characters from stack if length of RHS of the production is n 
                            c) push the LHS of the production onto stack.
                            d) do lookup of last two characters in table and push the result onto stack.
                            e) don't increment the input pointer.
                        4. If the look-up gives accept : string is accepted. 
                        5. If the look-up gives empty cell then it's an error.
                // SLR(1) : Simple LR, more powerful than LR(0). has more empty cells hence more error detection.
                    Canonical collection of LR(0) items is used to construct LR parsing table.
                    // Construction of parsing table:
                        1. All procedure is same as LR(0) except the reduce moves, unlike LR(0) the reduce does not fill the entire row.
                        2. place the reduce move in Follow() of LHS only.                
                // CLR(1) : Canonical LR
                    Canonical collection of LR(1) items is used to construct LR parsing table.
                    LR(1) items = LR(0) items + look ahead. No of states in LR(1) might be greater than no of states in LR(0) due to look-ahead.

                    Look ahead are used to determine where the items in final state are placed in parsing table.
                    // Construction of parsing table:
                    1. Start with augmented production, look ahead is always $ for this.
                    2. For the production : A -> a.Bb, a/b
                        here a/b are two look ahead, now because of .B we'll add all productions of B to closure.
                            B -> .r, look ahead
                            here look ahead will be First() of remaining stuff after .B in above production i.e. First(b, a/b) = c (say)
                            B -> .r, c
                    3. For production of the type : A -> a.B, a/b
                        by step #2 here remaining stuff after .B is only (a/b)
                        hence look ahead for B -> .r, look ahead will be same as the production i.e. a/b
                    4. When new state is created due to some transition the look ahead will remain same. 
                    5. The reduce moves are only placed in the look-aheads. hence its less than LR(0) and SLR(1) so no of conflicts are reduced. Due to more no of empty cells error detection is improved.

                // LALR(1) : Look ahead LR
                    Canonical collection of LR(1) items is used to construct LR parsing table.                
                    // Construction of parsing table is same as in CLR(1)
                        1. No of states here are reduced than CLR(1) since we merge the states which differ only in look-ahead. hence it has same no of states as LR(0) and SLR(1).
                            How to merge : merge state 3 and 6
                                1. change all the shift moves 
                                    e.g. s3, s6 to s36, s36
                                2. change all states in goto part 
                                    e.g. 3, 6 to 36, 36
                                3. change state names in row headers
                                4. remove duplicate rows after taking their union.
                                    e.g.
                                    row36 : s2 s36  -
                                    row36 : - s36  s4
                                    make row36 : s2 s36 s4 and remove one.
                        2. because of merging there could be conflicts hence every CLR(1) grammar is not LALR(1).   


// Syntax Directed Translation (SDT) : grammar + sematic rules = SDT.
    some rules are given along with grammar :
        1. For each reduction in bottom-up parsing some action is also performed. 
        2. For each substitution in top-down parsing the tree includes one more branch for action associated with the production.

    Concrete Syntax tree : parse tree which includes all information about states and terminals.
    Abstract Syntax tree : represents only terminals directly, shorter version of parse tree. it does not include states. 

    // Type of attributes :
        in SDT variables have some attributes like A.value, B.dval etc. these attributes can be of two types.

        // Synthesized attributes:
            A -> BCD {A.val = B.val + C.val}
            attribute of parent takes value from children's attributes then it's called Synthesized attribute.
        // Inherited attributes:
            A -> BCD {C.val = A.val * D.val}
            attribute of children takes value from parent's attribute or sibling's attribute then it's called Inherited attribute.

    // Types of SDT :
        // S-attributed SDT :
            1. uses only synthesized attributes.
            2. sematic actions are placed at right end of production
                e.g. A -> ABC {A.val = B.val}
                hence this is also called postfix SDT.
            3. attributes are evaluated during BUP. (since actions are present at right end)

        // L-attributed SDT :
            1. uses both synthesized and inherited attributes (inherited attributes can be only from parent or left sibling)
            2. sematic actions can be placed anywhere.
            3. attributes are evaluated by traversing parse tree depth first, left to right. (since actions depend on left side elements only)

        If SDT is s-attributed then it is also L-attributed.

// Intermediate Code Generation :
    The following are commonly used intermediate code representation :
        Postfix notation
        Syntax tree
        Three-address code