///////////////////////Convert n-ary tree into Binary tree//////////////////

	1. connect all parents to their left most child
	2. connect siblings with right pointer i.e. left sibling with point to right one, and so on
	3. remove un-necessary pointers from parents to childs which are already connected (connected from before, due to n-ary structure)
	4. you get binary tree

//////////////////////////////////////////////////////////////////////////////

Binary tree with n nodes has n+1 null nodes
for N nodes there are 2^N - N different trees possible

////////////////////////////////////////////////////////////////////////

Perfect binary tree : completely filled, no empty spaces

Full binary tree (proper binary tree or  strictly binary tree) 
is the tree in which every node except the leaves have two children


Complete tree : every level except the last is completely filled and all nodes are to as left as possible (balanced trees)


Full binary tree contains odd no of nodes, contains 2^n-1 nodes

//depth(height) of tree:

	int depth(root){
		if(root == NULL)
			return 0;
		return 1 + max(height(root->left), height(root->right))
	}

//isBalanced :
	diff between max depth and mindepth should not be more than 1 to be balanced.

//Level-order traversal :
	just like BFS of graph.
	use Queue and enqueue the root
	while Queue is not empty
		dequeue element 
		print it and enqueue its children.

//Delete Tree :
	to delete the tree we have to delete all elements in postorder since its only correct to delete children before parent.
	void Delete(root){
		if(root == NULL)
			return
		Delete(root->left)
		Delete(root->right)
		free(root)
	}
	//here we have used indirection because the above function deletes the tree but doesnt set the root pointer to null (root is still pointing to memory which is freed)

	void delete(root){
		Delete(root)
		root = NULL
	}

//Sorted Linked list to BST :

	//Simple
		get the middle of list and make it root
		get middle of left part and make it root->left
		get middle of right part and make it root->right

	//Construct starting from leaves to root:
		get no of nodes in list (n)
		construct left tree with n/2 nodes
		create root node that points to head and root->left = left tree
		increment the head pointer in list
		construnct right tree with n/2 -1 nodes
		set root->right = right tree

//Create linked list out of each level :
	for n levels create n linked lists containing level wise nodes.

	algorithm :
		1. for each level keep the linked list in map, level no against list pointer.
		2. create list , add root to list, add list in map against level 0.
		3. while True
				create new list, get list pointer from map for level.
				iterate for all members of list.
				add their children to current list 
				if list is not empty
					add this list to map against level + 1
				else
					break out of loop, you are done
				level++

//Inorder successor :
	successor of node x :

		go to x->right and then left most node is successor.
		if x->right is NULL
			p = x->parent
			if x is left child of p then p is successor.
			if x is right child :
				find the ancestor for which x is in left subtree.

					while((p = x.parent) != NULL){
						if(p.left == x){
							break;	//p is successor.
						}
						else{
							x = p 	//travel up in tree.
						}
					}

//First Common Ancestor :

	if its BST:
		do common find on two values and the point where the find diverge is the common ancestor.
		
		if both less than root, find on left-subtree
		if both greater than root, find on right-subtree
		else return root as common ancestor.	

	if NOT BST:
		1. if nodes have parent pointer then trace up parent till both pointers meet.
			find their depths. go up from deeper pointer till their depths become equal, 
			after that go one level above, for each pointer till they meet.

		2. check if both nodes are contained in left side or right side of current node, if not then current node is the ancestor.

				node *commonAncestor(tree root, tree p, tree q{	
					if(covers(root.left, p) && covers(root.left, q))
						return commonAncestor(root.left, p, q);
					if(covers(root.right, p) && covers(root.right, q))
						return commonAncestor(root.right, p, q);
					return root;
				}
				int covers(tree root, tree p){ /* is p a child of root? */
					if(root == null) return false;
					if (root == p) return true;
					return covers(root.left, p) || covers(root.right, p);
				}
		3. improve above approach
			covers is used to count if both the required nodes are under the root.

			if both nodes are on left of current node
				if left child of node is either of two then that is ancestor.
				else find recursively by changing current node = left node.
			if both nodes are on right of current nodes
				if right child of node is either of two then that is ancestor.
				else find recursively by change current node = right node.
 			if one node is under left side of current
				if current is other node, then current is ancestor.
			if one node is under right side of current
				if current is other node, then current is ancestor.

			current is ancestor.

//Subtree :
	here subtree means proper subtree, i.e. once it matches it should match till the leafs. subtree rooted at the root means totally identical tree.
	
	to check if one tree is subtree of another, find inorder and preorder traversal and check for substring.
	two traversals are needed since there can be many trees corresponding to one inorder traversal.

	algorithm:
		p is subtree of q or not
		if p->data == q->data, check if p and q match
		else
			p is subtree of q->left or not.
			p is subtree of q->right or not.
			return true/false


			int match(p, q){
				if(p == null && q == null)	
					return 1
				if(p == null || q == null)
					return 0
				if(p->data != q->data)
					return 0
				return match(p->left, q->left) + match(p->right, q->right)
			}

//All paths in Tree that sum up to v :
	
	paths starting from any node and ending on any node.
	starting from root, on each node check if the path ends on this node i.e. traverse upwards till level 0 and see if sum equals v or not.

					void findSum(node head, int sum, buffer,level){		
						if (head == null) return;
						int tmp = sum;
						buffer.add(head.data);
						
						for (int i = level;i >= 0 ; i--){
							tmp -= buffer.get(i);
							if (tmp == 0) 
								print(buffer, i, level);
						}

						c1 = buffer.clone();
						c2 = buffer.clone();
					
						findSum(head.left, sum, c1, level + 1);
						findSum(head.right, sum, c2, level + 1);
					}

//Maximum sum of any path :	
	it can start and end anywhere.
	its the max value of 
		root->data
		root->data + maxval(root->left)
		root->data + maxval(root->right)
		root->data + maxval(root->left) + maxval(root->right)

//Max sum from one leaf to another leaf :
	the function returns max sum from root to leaf and sets the result variable to max sum from leaf to leaf.
				int maxPathSumUtil(struct Node *root, int &res){
				    
				    // Base cases
				    if (root==NULL) return 0;
				    
				    if (!root->left && !root->right) return root->data;
				 
				    // Find maximum sum in left and right subtree. Also find
				    // maximum root to leaf sums in left and right subtrees
				    // and store them in ls and rs
				    int ls = maxPathSumUtil(root->left, res);
				    int rs = maxPathSumUtil(root->right, res);
				 
				    // Find the maximum path sum passing through current root.
				    // Note that every path will pass through some node and
				    // recursive function is called for every node
				    int curr_sum = ls + rs + root->data;
				 
				    // Update res (or result) if needed
				    if (res < curr_sum)
				        res = curr_sum;
				 
				 
				    // This is needed to handle cases when node has a single child
				    if (!ls || !rs) return (!ls)? rs + root->data: ls + root->data;
				    else return max(ls, rs) + root->data;
				 
				    // Return the maximum root to leaf path sum
				    return max(ls, rs)+root->data;
				}

//Binary tree to Doubly linked list:
	1. fix the prev pointers of all nodes.
		do inorder traversal and while at it, change left pointers of all nodes to prev pointers in list
		
			void fixPrevPtr(node *root){
				    node *pre = NULL;
				    if (root != NULL){
				        fixPrevPtr(root->left);
				        root->left = pre;
				        pre = root;
				        fixPrevPtr(root->right);
				    }
			}

	2. fix the right pointers by going to the last node and traverse backwards with prev pointer along the way fix next pointers.
			
			node *fixNextPtr(node *root){
			    node *prev = NULL;
			 	while (root && root->right != NULL)
			        root = root->right;
			 	
			 	while (root && root->left != NULL){
			        prev = root;
			        root = root->left;
			        root->right = prev;
			    }
			    return (root);
			}

//Great Tree-list recursion problem:

	convert tree to doubly circular linked list 
	treelist();
	use recursion (take leap of faith).
	algorithm:
		1. treelist(root->left)
		2. treelist(root->right)
		3. make dll of current node (list with single node)
		4. append list of left subtree to list of root
		5. append list from step 4 to list of right subtree

		in the append function:
		append(a, b):
			a->last = b
			b->first = a

			b->last = a
			a->first = b

//print all possible paths from root to leaf node:

	use recursion (leap of faith):
	path[] it contains all numbers on the path, pathlen variable that acts as array index
	printpath(root):
		1. if null return
		2. add current node to the path array
		3. if its leaf then print the whole path
		4. else recurr printpath(root->left) printpath(root->right)

//ISBST:

	1. not efficient :
		check if for each node the max in left subtree is less than root and min in right subtree in greater than node.
	2. efficent :
		for each node, check if its within min and max if not its not bst
		for root min and max are -inf, inf
		for root->left its -inf, root->value
		for root->right its root->value, inf
		these values go on updating as we traverse the tree, each node must lie in these values
	3. inorder traversal : if its sorted then tree is bst else not

//we can construct tree from its traversals:

	inorder and postorder
	inorder and preorder

	it can also be constructed from preorder and postorder but in that case the tree need not be unique.