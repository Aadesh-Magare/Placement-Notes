Time Complexity:

the order of time is 
 
 logn < n < nlogn < n^2 < 2^n < n!

 Big Oh (O) : Upper Bound
 Big Omega :  lower bound
 Big Theta :  both upper and lower bound, The theta notation bounds a functions from above and below

 // Profiling :
 	 The process of generating a statistical analysis of a program that shows processor time and the percentage of program execution time used by each procedure in the program.

// Time Complexity of loops:
	Time Complexity of a loop is considered as O(Logn) if the loop variables is divided / multiplied by a constant amount.
	for (int i = 1; i <=n; i *= c)  or  for (int i = n; i > 0; i /= c) 

	Time Complexity of a loop is considered as O(LogLogn) if the loop variables is reduced / increased exponentially by a constant amount.
	for (int i = 2; i <=n; i = pow(i, c)) or for (int i = n; i > 0; i = sqrt(i))

// Pseudo-polynomial algorithm
	An algorithm whose worst case time complexity depends on numeric value of input (not number of inputs) is called Pseudo-polynomial algorithm

	an algorithm whose time complexity is only based on number of elements in array (not value) is considered as polynomial time algorithm

// Amortized Analysis:

	Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other operations are faster.

//Space Complexity:
	Auxiliary Space is the extra space or temporary space used by an algorithm.

	Space Complexity of an algorithm is total space taken by the algorithm with respect to the input size. Space complexity includes both Auxiliary space and space used by input.