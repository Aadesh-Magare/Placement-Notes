on seeing particular input, it can go to only one state from the current state.


// Complement of DFA :
    all other properties in tuple remain same except the final state.
    change all final states from original DFA to non-final and non-final states to final .

    when you complement a DFA, the language getting accepted by DFA also gets complemented. 

// Reversal of DFA :
    draw the states as it is.
    swap initial and final states.
    change the direction of arrows. (i.e. transition on given input)

    on reversal, it's possible to get NFA for DFA reversal.

    DFA should have only one initial state, hence for reversal of DFA having multiple final states, create a new final state with epsilon transitions from current final states. then reverse the automata. and convert result back to DFA. 

// Minimization of DFA:
    // Equivalent states:
        two states are said to be equivalent if both of them go to final state on seeing a input w (the final states need not be same) or both of them do not go to final state on seeing a input w.

        if length of w is n then the states are called n-equivalent states.

    1. remove all the states which are unreachable from initial state.
    2. create state transition table.
    3. find 0-equivalent states : it will give you two sets i.e. set of final states and set of non-final states.
    4. find 1-equivalent to n-equivalent states : use sets from previous step. go on finding n+1 equivalent states unless you get two steps whose outputs are same.
    5. the sets in last step will be the states in minimized DFA.
