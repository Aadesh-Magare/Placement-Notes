on seeing a particular input, you can end up in many states from the current state.

most of real life machines are DFA.
NFA machines are not real, theoretical concept.

if for some state, its not defined where it goes on seeing a particular symbol, we say that it goes to null state.

NFA will always have less no of states than corresponding DFA. hence no of states in minimal DFA will be greater than or equal to no of states in corresponding minimal NFA.

// Conversion of NFA to DFA :

    first draw NFA.
    construct state transition table :
        states as rows and input symbols as columns.
        add entries for all transitions in NFA.
    
    e.g.

                a       b
        A       {A,B}   {A}

        B       {C}     {C}                

        C       {}      {}


    convert the table into state transition table for DFA:
        for fields with multiple states ( {A,B}) create a new combined state with the name of those states (AB)
        only include those states which are reachable from start symbol.
        for adding transitions for combined state, take union of rows for those states from NFA transition table.
        initial state will remain same in both cases
        final state in DFA will be all those states which contain final state from NFA.

// Complement of NFA:
    when DFA is complemented language getting accepted by it gets complemented as well but that's not the case with NFA.

    the language accepted by NFA need not get complemented when NFA is complemented, it may get complemented but not always.
        if L = (a + b)*
        L1 is some subset of L, obtained by NFA M1.
        if L2 is language obtained by Complement of M1.
        L2 = L - L1 is not always true.
    
// Conversion of E-NFA to NFA :

    E-NFA is NFA with epsilon moves.

    E-closure of state : set of states you can reach from the current state with epsilon input.
    E-closure of a state always contains the state itself.

    DFA, NFA and E-NFA have same power and are inter convertible.

    1. create state transition table for NFA
    2. include only non-epsilon moves in the table since its for NFA and not E-NFA.
    3. For a transition, to get set of destination states : use this
                E* input symbol E*
        i.e. 
            a) Find epsilon closure of current state.
            b) Consider transitions with given input symbol for all states in the closure.
            c) Find epsilon closure of all states from step b
            d) The obtained set of states goes to the transition table against the input symbol.
     

There are some languages for which constructing a FA is not possible. (.e.g a^nb^n n>= 1)
because FA does not have infinite memory.
