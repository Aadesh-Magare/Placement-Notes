It accepts recursively enumerable language generated by type-0 grammar.

A turing machine consists of a tape of infinite length on which read and writes operation can be performed. The tape consists of infinite cells on which each cell either contains input symbol or
a special symbol called blank. It also consists of a head pointer which points to cell currently being read and it can move in both directions.

Turing machine is expressed as 7 tuple where :
    Q : finite set of states
    T : tape alphabet (which can be written on tape)
    B : blank symbol.
    sigma : input alphabet.
    delta : transition function Q * T -> Q * T * {L, R} Depending on current state,
            current tape alphabet it will move to new state, change the tape symbol and move head to Left or Right
    q : initial state
    F : set of final states.

Non-Deterministic TM and Deterministic TM have same power.

There can be TM with multiple tapes with separate head pointer for each, but it has same power as single tape TM. and both are inter convertible.

// Undecidability and Reducibility :
    // Decidable Problems
        A problem is decidable if we can construct a Turing machine which will halt in finite amount of time for every input and give answer as ‘yes’ or ‘no’. 

        e.g.
            1. Equivalence of two regular languages: Given two regular languages, there is an algorithm and Turing machine to decide whether two regular languages are equal or not. Also disjoint-ness of regular languages.
            (this also includes language generated by DFA and NFA are equal or not)
            2. Finiteness of regular language: Given a regular language, there is an algorithm and Turing machine to decide whether regular language is finite or not.
            3. Emptiness of context free language: Given a context free language, there is an algorithm to check whether CFL is empty or not.
    // Undecidable Problems
        A problem is undecidable if there is no Turing machine which will always halt in finite amount of time to give answer as ‘yes’ or ‘no’.

        e.g.
            1. Ambiguity of context-free languages: Given a context-free language, there is no Turing machine which will always halt in finite amount of time and give answer whether language is ambiguous or not.
            2. Equivalence of two context-free languages: Given two context-free languages, there is no Turing machine which will always halt in finite amount of time and give answer whether two context free languages are equal or not.
            3. Everything or completeness of CFG: Given a CFG and input alphabet, whether CFG will generate all possible strings of input alphabet (∑*) is undecidable.
            4. Regularity of CFL, CSL, REC and REC: Given a CFL, CSL, REC or REC, determining whether this language is regular is undecidable.
            5. Two popular undecidable problems are halting problem of TM and PCP (Post Correspondence Problem)
            6. Emptiness of RE language.

    // Semi-decidable problem :
        It's subset of undecidable problems for which Turing machine will always halt in finite amount of time for answer as ‘yes’ and may or may not halt for answer as ‘no’.

    // Rice’s Theorem :
        Every non-trivial (answer is not known) problem on Recursive Enumerable languages is undecidable.

    // Language A is reducible to language B (represented as A≤B) if there exists a function f which will convert strings in A to strings in B.
        If A≤B and B is decidable then A is also decidable.
        If A≤B and A is undecidable then B is also undecidable.

        