//I/O streams :
	
	ios = base class for all i/o its virtual base class.
  
	cin.get(c); or c = cin.get(); reads single character from stdin
	cout.put('x') or put(ch); write one character to stdout.

	cin.getline(line, size) : reads whole line or size characters 
	cout.write(line, size) : write size characters from line string, it doesnt stop till size characters are written even if string ends.

	//eof():
		detects end of file, returns non-zero value on end of file, 0 otherwise.

	//File handling :
		ofstream outfile("filename");	//create object for file writing.
		ifstream infile("filename1");	//create object for file reading.

		outfile << name << "\n";	//written to file
		infile >> name;				//read from file

		infile.close();
		infile.open("newfile");


		if(infile.eof() != 0)
			//end of file

		infile.open("newfile", ios::in | ios::out);	//	read/write mode.
		infile.seekg(n)	//seek to n bytes from start.

		//read and write functions
			they operate on binary data.

			infile.read((char *) &ObjectToBeWritten, sizeof(ObjectToBeWritten));
			infile.write((char *) &ObjectToBeWritten, sizeof(ObjectToBeWritten));

//Exception Handling :
	
	synchronous (due to programs error) Exception and asynchronous (caused due to external factors) Exception. we can handle synchronous Exception only.

	try block surrounds the statements and throws an exception in case some exception occurs the catch block immediately follows try block and contains error handling code

	catch block catches exception and matches the type of exception with its own type if they doesnt match then it abort() the program, if it matches then its handled by catch block.

	throw throws an object, it can be of custom class, that we created.

	catch(...)	//it can handle any exception irrespecitve of its type.

//New Features of ANSI C++ :
	
	//new data types : 
		bool : true and false are keywords 
		wchar_t : to hold 16bit wide characters. 
					to represent wide character literal we use L'asad'
	//new operators : 
			c style cast
				double y = (double) n;
			c++ style cast
				double y = double(n);

			static_cast :
				double y = static_cast<double> (n);
				easy to spot, doesnt get lost in other code, its easy to search for automated tools.
			const_cast:
				used to remove the const-ness of object the target type is same as before but object is no longer const.
				double y = const_cast<double> (n);
			reinterpret_cast: 
				used to cast inherently incompatible types into one another i.e. like int to int pointer.
				int *ip = reinterpret_cast<int *>(n)
			dynamic_cast : type-safe downcast.
				its based on RTTI.
				dynamic_cast<type>(object)
				perform cast on polymorphic objects. so at runtime the type is to be checked and casted into another type. it does not perform illegal casts.
			typeid :
				its used to check type of object at runtime. 
					typeid(object).name();
	
	//RTTI : runtime type information:
		its available to classes with at least one virtual function

	//explicit keyword :
		myclass m1(100);
		myclass m1 = 100;
		both these object initialization work because implicit conversion happens in second case. to disable this feature we can declare the constructor as explicit which avoids its implicit conversoin like this :
				myclass m1 = 100 //wont work now.
				myclass m1(100)	//will still work.

	//Mutable keyword :
		if we want a class to be const but still want some of its member to be changeable then declare that member as Mutable. then even if its class is const the member can be changed.
			mutable int m;

	//Operator keyword :
		&& = and
		|| = or
		!= not_eq
		& = bitand
		^ = xor
		|= or_eq
		^= xor_eq

	//Namespace :
		
		namespace myname{
			int m;
			void myfun(){

			}
		}

		myname :: m = 5;
		myname :: myfun();

		using namespace myname;
		m = 40;
		myfun();

		//unnamed namespace 
			the contents of such namespace are global you can use them directly.
			they are accessible in the current file

//Templates :
	
	it provides support for generic programming by enabling us to define generic classes and generic functions.

	its like macro, the generic type is replaced by actual type of object when its created. template is defined with a parameter that will be replaced by specific data type at time of actual use of template, so templates are sometimes called as parameterized classes or functions.

			template<class Type>
			class myclass{
				Type *arr;
				int size;
				public :
					myclass(int m){
						arr = new Type[size]
					}
					myclass(Type *a);		
			}
			template<class Type>	
			//its necessary to write this again. each template statement is for //following one block only 
			myclass<Type> :: myclass(Type *a){
				for(int i = 0; i < size; i++)
							arr[i] = a[i]
			}


			myclass <int> m1(100);	//this is called instantiation.
			Type in template class will be replaced by int.

	//template can have multiple parameters.

			template<class T1, class T2>
			class myclass{
				//use T1 and T2 as data types.
			}

	//Default values can be given to parameters, so that if some instantiation does not give types, Default type is taken 
			template<class T1 = int, class T2 = float>

	//one of the parameters can be normal also (Non-type template)
		template<class T1, 5> //here second argument is just int not generic

	//Function Templates :
		template<class T>
		void swap(T &x, T &y){
			T temp = x;
			x = y;
			y = temp;
		}

		//it also support multiple parameters
			template<class T1, class T2>

		//Template functions can be overloaded.
			template<class T>
			void show(T a){
				//do something;
			}
			template<class T, class S>
			void show(T a, S b){
				//do something;
			}
			void show(int p){
				//do something;
			}

			overloading resolution :
				1. first it searches for exact match , if found its used directly.
					e.g. show(5) the last function will be used and not generic
				2. it sees for exact match by substituting the type.
					e.g. show(5.5) first function will be used 
						 show(4, 5.3) second function will	 be used.